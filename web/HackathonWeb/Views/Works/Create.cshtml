@model HackathonWeb.Context.Models.Work

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Work</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div id="mapContainer" style="height: 500px;"></div>


            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ContractorId" class="control-label"></label>
                <select asp-for="ContractorId" class="form-control" asp-items="ViewBag.ContractorId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script>
    var platform = new H.service.Platform({
  'app_id': 'hwsacH3LqmkOHfV7DjIR',
  'app_code': 'CVFdBhRJpDiSh9hCNUzMaw'
});
var defaultLayers = platform.createDefaultLayers();

var map = new H.Map(
  document.getElementById('mapContainer'),
  defaultLayers.normal.traffic,
  {
    zoom: 11.5,
    center: { lat: 55.781207, lng: 49.131165 }
  });

 var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

  // Create the default UI components
  var ui = H.ui.UI.createDefault(map, defaultLayers);


  var londonMarker = new H.map.Marker({lat:55.781207, lng:49.131165});
  map.addObject(londonMarker);


  //Create the svg mark-up
  var svgMarkup = '<svg clip-rule="evenodd" fill-rule="evenodd" height="22" image-rendering="optimizeQuality" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" viewBox="0 0 25 22" width="25" xmlns="http://www.w3.org/2000/svg"><path d="m14 1c4 6 7 13 11 19 0 1 0 2-2 2-7 0-14 0-21 0-2 0-2-1-2-2 4-6 7-13 11-19 1-1 2-1 3 0z" fill="#fff"/><path d="m11 1-10 18v1c-1 1 0 2 1 2h21c1 0 2-1 1-2v-1l-10-18c-1-1-2-1-3 0zm1 19h10c0-1-1-2-1-3l-8-14h-1l-9 16v1z" fill="#f20"/><path d="m14 8c1 0 1 1 1 1v1s-1 1-1 1-1-1-1-1 0 0 0-1c0 0 0 0 0-1zm-3 8-1 3c-1 1-2 0-2 0s0-1 1-1l1-2s0 0 0-1v-1l1 1zm1-2 1-2v2zm-2-2v1c1-1 1-2 1-2h-1zm5 3 3 2s0-1 1-2l2 4h-7s1 0 1-1c1 0 2 0 2-1l-2-1h-1v3c-1 0-1 0-1 0v-3l-3-2s0 0 0-1h-1-1c0-1 0-1 0-1s2-2 2-2h2l1 1h1z"/></svg>';
  var roadWorkIcon = new H.map.Icon(
        svgMarkup.replace('${FILL}', 'blue').replace('${STROKE}', 'red'));

  map.addEventListener('tap', function (evt)
  {
        var coord =
        map.screenToGeo(evt.currentPointer.viewportX, evt.currentPointer.viewportY);

      var lineString = new H.geo.LineString();

        console.log(({lat:coord.lat, lng:coord.lng}));
      lineString.pushPoint({lat:coord.lat, lng:coord.lng});

      map.addObject(new H.map.Polyline(
        lineString, { style: { lineWidth: 4 }}
      ));
  })

</script>

